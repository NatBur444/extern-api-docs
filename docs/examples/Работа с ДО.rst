.. _`GET Docflow`: http://extern-api.testkontur.ru/swagger/ui/index#!/Docflows/Docflows_GetDocflowAsync
.. _`GET Docflows`: http://extern-api.testkontur.ru/swagger/ui/index#!/Docflows/Docflows_GetDocflowsAsync
.. _`POST CreateReplyDocument`: http://extern-api.testkontur.ru/swagger/ui/index#!/Docflows/DocflowReplyDocument_CreateReplyDocumentAsync
.. _`PUT ReplyDocument`: http://extern-api.testkontur.ru/swagger/ui/index#!/Docflows/DocflowReplyDocument_SaveReplyDocumentSignatureAsync
.. _`POST ReplyDocument`: http://extern-api.testkontur.ru/swagger/ui/index#!/Docflows/Docflows_SendReplyDocumentAsync
.. _`POST DocumentPrint`: http://extern-api.testkontur.ru/swagger/ui/index#!/Docflows/Docflows_GetDocumentPrintAsync

Пример работы с документооборотом
=================================

После отправки черновика мы получаем идентификатор документооборота (id). В этом примере рассмотрим, как по id получить документооборот и работать с ним дальше. Пример касается документооборота ФНС типа Декларация.

Порядок работы
--------------

Ниже представлена схема прохождения данного типа документооборота

.. image:: /_static/dc_example4.jpg

.. note:: По сути вся работа с документооборотом сводится к двум моментам:

  * следить за статусом незавершенных документооборотов;
  * при необходимости отправлять ответные документы.

Этапы работы с документооборотами:

1. Запрашиваем статус документооборота. Это можно делать двумя способами. Первый - запрашивать периодически конкретный документооборот, запомнив его id при отправке черновика. Второй - запрашивать список документооборотов своей учетной записи (предпочтительный вариант). Возможные статусы документооборота:

    * статус "Отправлен" означает, что изменений в документообороте после отправки черновика ещё не произошло, никаких действий не требуется;
    * статус "Доставлен" означает, что документ дошел до ФНС и принят в работу. В документообороте при этом появится новый документ *Извещение о получении*, никаких действий не требуется;
    * статус "Ответ обработан" означает, что на отправленный документооборот пришли результаты приема, переходим к шагу 2.  

2. Получены результаты приема, формируем *Извещения о получении* на них. Существует два возможных результата приема:

    * пришло уведомление об отказе, в ответ на него необходимо направить извещение о получении. После этого документооборот считается **завершенным**. Уведомление об отказе означает, что отправленный документ ФНС не приняла. Налогоплательщик может изучить причины отказа в уведомлении, исправить их и отправить документ заново, создав новый черновик.  
    * пришла квитанция о приеме, в ответ на неё необходимо направить извещение о получении. Квитанция о приеме означает, что отправленный документ ФНС приняла и приступила к его проверке.  

3. Повторяем шаг 1: запрашиваем статус документооборота и ждем его изменения на "Получен ответ":

    * Статус "Получен ответ" означает, что на отправленный документ пришли результаты обработки, переходим к шагу 4.

4. Существует два возможных результата ответа: 

    * пришло извещение о вводе, в ответ на него необходимо направить извещение о получении. После этого документооборот считается **завершенным**.
    * пришло уведомление об уточнении, в ответ на него необходимо направить извещение о получении. После этого документооборот считается **завершенным**. Налогоплательщик может исправить недочеты, указанные в уведомлении, исправить их и отправить корректировку, создав новый черновик.

Рассмотрим подробнее каждый шаг:

1. Запрашиваем статус документооборота
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Данный процесс можно организовать двумя методами:

* Метод: `GET Docflow`_ 

  В цикле запрашиваем документооборот, оптимальным периодом запроса можно считать 1 час, изменения в документообороте не происходят часто. В результате работы метода содержится вся актуальная информация по документообороту, в том числе и его статус.

**Запрос**: 

.. code-block:: http

   GET /v1/ea3a9316-d3c5-4544-a6df-4e8d9aa9f813/docflows/520e9bec-90b3-4d35-ab18-240ee2c72df3 HTTP/1.1
   Authorization: auth.sid AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
   X-Kontur-Apikey: AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAA
   Content-Type: application/json
   Host: extern-api.testkontur.ru
   Connection: keep-alive


* Метод: `GET Docflows`_

  В результате работы этого метода мы получаем список всех документооборотов учетной записи, у каждого документооборота в списке будет мета-информация о нем, в том числе и его статус. Вы сможете выбирать документообороты только нужного статуса, если зададите фильтр для полученного списка по полю status. Если в списке будет видно изменение статуса, то можно запрашивать документооборот, чей статус изменился с помощью предыдущего метода GET Docflow и работать с ним дальше.

**Запрос**: 

.. code-block:: http

   GET /v1/ea3a9316-d3c5-4544-a6df-4e8d9aa9f813/docflows?take=3 HTTP/1.1
   Authorization: auth.sid AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
   X-Kontur-Apikey: AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAA
   Content-Type: application/json
   Host: extern-api.testkontur.ru
   Connection: keep-alive


2. Формирование извещения о получении на результаты приема
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Для этого необходимо воспользоваться последовательностью методов: 

* Метод: `POST CreateReplyDocument`_

Метод позволяет сгенерировать xml-файл документа установленного формата и печатную форму извещения о получении, в теле запроса передаем контент сертификата.

**Запрос**: 

.. code-block:: http

   POST /v1/ea3a9316-d3c5-4544-a6df-4e8d9aa9f813/docflows/520e9bec-90b3-4d35-ab18-240ee2c72df3/documents/3bd9e2ba-9273-4e21-ae56-      c7eb4aa17538/reply/fns534-report-receipt/generate HTTP/1.1
   Authorization: auth.sid AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
   X-Kontur-Apikey: AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAA
   Content-Type: application/json
   Host: extern-api.testkontur.ru
   Content-length: 3316
   Connection: keep-alive
   
   {
	   "certificate-base64": MIIJszCCCWKgAw ... NrZxycuX
   }

* Метод: `PUT ReplyDocument`_

Для подписи полученного xml-файла в теле данного метода подкладывается подпись. 

**Запрос**:

.. code-block:: http

   POST 
   Authorization: auth.sid AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
   X-Kontur-Apikey: AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAA
   Content-Type: application/json
   Host: extern-api.testkontur.ru
   Content-length: 
   Connection: keep-alive

* Метод: `POST ReplyDocument`_

Данный метод отправляет подписанный документ в ФНС.

**Запрос**:

.. code-block:: http

   POST /v1/ea3a9316-d3c5-4544-a6df-4e8d9aa9f813/docflows/520e9bec-90b3-4d35-ab18-240ee2c72df3/documents/3bd9e2ba-9273-4e21-ae56-c7eb4aa17538/reply/fns534-report-receipt/send HTTP/1.1
   Authorization: auth.sid AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
   X-Kontur-Apikey: AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAA
   Content-Type: application/json
   Host: extern-api.testkontur.ru
   Content-length: 87214
   Connection: keep-alive

3. Ожидание результатов обработки
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Работаем аналогично п.1.

4. Формирование извещения о получении на результаты обработки
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Работаем аналогично п.2

Примечание
----------

* Статусы необязательно могут меняться строго последовательно.
* Среди ссылок с типом *reply* есть ссылка, которая ведет на формирование извещения о получении подтверждения даты отправки. Это технологический документ, им вы сообщаете о получении вами подтверждения даты отправки.

Печать документов
~~~~~~~~~~~~~~~~~

Метод: `POST DocumentPrint`_ 

Также в любой момент времени можно получить печатную форму любого формализованного документа в документообороте. В теле запроса передается контент печатаемого документа в base64. При чем во время печати мы проверим переданный на печать документ на соответствие подписи этого документа в документообороте. Если на печать передали контент измененного документа, то вернется ошибка.

